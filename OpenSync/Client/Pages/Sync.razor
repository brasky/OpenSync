@page "/room/{roomName}"

@using Microsoft.AspNetCore.SignalR.Client
@using System.Threading;
@using System.Net.Http;
@inject HttpClient Http;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

    <div>
        <div class="section">
            <div class="row flex">
                <div class="col s12 m9 l9">
                    <div class="iframe-container">
                        <div id="ytplayer">
                        </div>
                    </div>
                </div>
                
                <div class="col s12 m3 l3">
                    <div class="setUsername">
                        @if (!string.IsNullOrEmpty(UsernameErrorText))
                        {
                            <div style="color: red;">@UsernameErrorText</div>
                        }
                        <form action="javascript:void(0);">
                            <div class="input-field col s8 m8 l7">
                                <i class="material-icons prefix">home</i>
                                <input id="userName" type="text" class="validate" @bind="NewUsername" required pattern="[A-Za-z0-9]{1,20}">
                                <label for="userName">Username</label>
                            </div>
                            <div class="col s2 m4 l4 valign-wrapper">
                                <p class="valign-wrapper">
                                    <button class="btn waves-effect waves-light" type="submit" @onclick="SetUsername" name="action">
                                        Set
                                        <i class="material-icons right">
                                            person_add
                                        </i>
                                    </button>
                                </p>
                            </div>
                        </form>
                    </div>
                    <div class="members">
                        <h5>Members:</h5>
                        <ul>
                            @foreach (var member in Members)
                            {
                                if ((member == hubConnection.ConnectionId || member == Username) && (member == Leader || member == LeaderUsername))
                                {
                                    <li>Leader: @member (you)</li>
                                }
                                else if (member == Leader || member == LeaderUsername)
                                {
                                    <li>Leader: @member</li>
                                }
                                else if (member == hubConnection.ConnectionId || member == Username)
                                {
                                    <li>@member (you)</li>
                                }
                                else
                                {
                                    <li>@member</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="section">
            <div class="row">
                <div class="col s12 m6 l4">
                    <div class="form-group">
                        <form action="javascript:void(0);">
                            <label>
                                Video:
                                <input @bind="currentUrl" />
                            </label>
                            <button class="btn waves-effect waves-light" type="submit" @onclick="Send" name="action" disabled="@(!IsConnected)">
                                Add
                                <i class="material-icons right">add</i>
                            </button>
                        </form>
                    </div>
                </div>
                </div>
            <div class="row">
                <div class="col s12 m12 l12">

                    <div class="playlist">
                        <h2>Playlist:</h2>
                        <ul>
                            @foreach (var id in playlist)
                            {
                                if (currentId == id)
                                {
                                    <li>
                                        <div class="col s12 m9 l7">
                                            <div class="card-panel teal lighten-5 z-depth-1">
                                                <div class="row valign-wrapper">
                                                    <div class="col s4">
                                                        <img src="@videoThumbs.GetValueOrDefault(id)" alt="" class="responsive-img">
                                                    </div>
                                                    <div class="col s8">
                                                        <span class="black-text">
                                                            @videoTitles.GetValueOrDefault(id)
                                                        </span>
                                                    </div>
                                                    <div class="col s4 offset-s1">
                                                        <a @onclick="() => DeleteVideo(id)" href="javascript:void(0);" class="waves-effect waves-light btn"><i class="material-icons left">delete</i>delete</a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        @*<img src="@videoThumbs.GetValueOrDefault(id)" /> @videoTitles.GetValueOrDefault(id)*@
                                        @*<a @onclick="() => DeleteVideo(id)" href="javascript:void(0);">
                                            <svg class="bi bi-trash" width="1.25em" height="1.25em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                            </svg>
                                        </a>*@

                                    </li>
                                }
                                else
                                {
                                    <li>
                                        <div class="col s12 m9 l7">
                                            <div class="card-panel grey lighten-5 z-depth-1">
                                                <div class="row valign-wrapper">
                                                    <a @onclick="() => SwitchVideo(id)" href="javascript:void(0);">
                                                        <div class="col s4">
                                                            <img src="@videoThumbs.GetValueOrDefault(id)" alt="" class="responsive-img">
                                                        </div>
                                                        <div class="col s8">
                                                            <span class="black-text">
                                                                @videoTitles.GetValueOrDefault(id)
                                                            </span>
                                                        </div>
                                                    </a>
                                                    <div class="col s4 offset-s1">
                                                        <a class="waves-effect waves-light btn" @onclick="() => DeleteVideo(id)"><i class="material-icons left">delete</i>delete</a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        @*<a @onclick="() => SwitchVideo(id)" href="javascript:void(0);"><img src="@videoThumbs.GetValueOrDefault(id)" />@videoTitles.GetValueOrDefault(id)</a>*@
                                        @*<a @onclick="() => DeleteVideo(id)" href="javascript:void(0);">
                                            <svg class="bi bi-trash" width="1.25em" height="1.25em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                            </svg>
                                        </a>*@
                                    </li>
                                }
                            }
                        </ul>
                    </div>

                </div>

            </div>
        </div>

    </div>






    @code {
        [Parameter]
        public string roomName { get; set; }

        private HubConnection hubConnection;
        private bool updating = false;
        private int currentTimestamp;
        private string currentUrl;
        private string currentId;
        private bool isPaused = true;
        private int currentState;
        private static Action jsSync;
        private static Action jsNextVideo;
        private IList<string> playlist = new List<string>();
        private static readonly HttpClient client = new HttpClient() { BaseAddress = new Uri("https://localhost:44356/api/") };
        private Dictionary<string, string> videoTitles = new Dictionary<string, string>();
        private Dictionary<string, string> videoThumbs = new Dictionary<string, string>();
        public string Leader = string.Empty;
        public string LeaderUsername = string.Empty;
        public List<string> Members = new List<string>();
        public string Username = string.Empty;
        public string NewUsername = string.Empty;
        public string UsernameErrorText = string.Empty;


        private enum playerStates
        {
            Unstarted = -1,
            Ended = 0,
            Playing = 1,
            Paused = 2,
            Buffering = 3,
            VideoCued = 5
        }

        protected override async Task OnInitializedAsync()
        {
            jsSync = JsSync;
            jsNextVideo = JsNextVideo;
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri($"/syncHub?room={roomName}"))
                .Build();



            hubConnection.On<string, int>("ReceiveNewVideo", async (id, timestamp) =>
            {
                Console.WriteLine("New video received: " + id + " Current ID: " + currentId + " Timestamp: " + timestamp);
                if (string.IsNullOrEmpty(currentId))
                {
                    currentId = id;
                    Console.WriteLine("Create player");
                    playlist = playlist.Append(id).ToList();
                    await JSRuntime.InvokeVoidAsync("onYouTubeIframeAPIReady", id, timestamp);
                    GetTitle(id);
                    GetThumbnailUrl(id);
                    StateHasChanged();
                }
                else if (currentId != id)
                {
                    Console.WriteLine("Adding video to playlist with ID: " + id);
                    playlist = playlist.Append(id).ToList();
                    var currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
                    if (currentState == (int)playerStates.Ended)
                    {
                        Console.WriteLine("Playlist is done playing, moving to the newly added video.");
                        JsNextVideo();
                    }
                    GetTitle(id);
                    GetThumbnailUrl(id);
                    StateHasChanged();
                }
            });


            hubConnection.On<string, int, int>("ReceiveSync", async (id, timestamp, playlistSize) =>
            {
                Console.WriteLine("Received update " + id + " : " + timestamp.ToString());
                Console.WriteLine("Current ID: " + currentId + " Current Timestamp: " + currentTimestamp.ToString());
                if (playlist.Count != playlistSize)
                {
                    Console.WriteLine("Requesting playlists to be synced");
                    await hubConnection.SendAsync("PlaylistRequest", roomName);
                }
                if (currentId != id)
                {
                    currentId = id;
                    Console.WriteLine("Load new video: " + currentId);
                    await JSRuntime.InvokeVoidAsync("player.loadVideoById", id);
                    Console.WriteLine("Seeking to " + timestamp.ToString());
                    await JSRuntime.InvokeVoidAsync("player.seekTo", timestamp);
                    currentTimestamp = timestamp;
                    Console.WriteLine("Announcing state change");
                    StateHasChanged();

                }
                this.currentTimestamp = await JSRuntime.InvokeAsync<int>("getTimestamp");
                if (Math.Abs(currentTimestamp - timestamp) > 2)
                {
                    Console.WriteLine("Seeking from " + currentTimestamp.ToString() + " to " + timestamp.ToString());
                    await JSRuntime.InvokeVoidAsync("player.seekTo", timestamp);
                    this.currentTimestamp = await JSRuntime.InvokeAsync<int>("getTimestamp");
                }
            });

            hubConnection.On<bool, int>("ReceivePauseStatus", async (pauseStatus, timestamp) =>
            {
                isPaused = (int)playerStates.Paused == currentState;
                Console.WriteLine("Received Pause Status - isPaused: "
                    + pauseStatus.ToString()
                    + " Timestamp: " + timestamp.ToString()
                    + " CurrentState: " + currentState
                    + " isPaused: " + isPaused);
                if (isPaused != pauseStatus)
                {
                    currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
                    if (currentState != (int)playerStates.Playing)
                    {
                        Console.WriteLine("Resuming video");
                        await JSRuntime.InvokeVoidAsync("player.playVideo");
                        currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
                        isPaused = false;
                    }
                    else
                    {
                        Console.WriteLine("Pausing video");
                        await JSRuntime.InvokeVoidAsync("player.pauseVideo");
                        await JSRuntime.InvokeVoidAsync("player.seekTo", timestamp);
                        currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
                        isPaused = true;
                    }
                }
            });

            hubConnection.On<List<string>, string, int>("ReceivePlaylist", async (playlist, videoId, timestamp) =>
            {
                Console.WriteLine("Receiving playlist data: " + string.Join(", ", playlist));
                Console.WriteLine("Playlist's current video: " + videoId + " and timestamp: " + timestamp.ToString());
                if (!this.playlist.SequenceEqual(playlist))
                {
                    this.playlist = playlist;
                    foreach (var id in playlist)
                    {
                        try
                        {
                            Console.WriteLine("Adding video title and thumbnail for ID: " + id);
                            GetTitle(id);
                            GetThumbnailUrl(id);
                        }
                        catch (System.ArgumentException)
                        {
                            Console.WriteLine("Title/Thumbnail were already in their respective lists");
                        }

                    }
                    currentId = videoId;
                    currentTimestamp = timestamp;
                    Console.WriteLine("Received playlist, loading video " + videoId);
                    await JSRuntime.InvokeVoidAsync("onYouTubeIframeAPIReady", videoId, timestamp);
                    StateHasChanged();

                }
            });

            hubConnection.On("PlaylistRequest", async () =>
            {
                Console.WriteLine("Another Client Requested Playlist Sync");
                if (playlist.Count > 0)
                {
                    Console.WriteLine("Sending playlist");
                    currentTimestamp = await JSRuntime.InvokeAsync<int>("getTimestamp");
                    await hubConnection.SendAsync("SendPlaylist", roomName, playlist, currentId, currentTimestamp);
                }
            });

            hubConnection.On<string>("Leader", (name) =>
            {
                Leader = name;
                if (hubConnection.ConnectionId.Equals(Leader) && !updating)
                {
                    StartUpdating();
                }
                StateHasChanged();
            });

            hubConnection.On<List<string>>("Members", (members) =>
            {
                Members = members;
                StateHasChanged();
            });

            await hubConnection.StartAsync();
        }

        void StartUpdating()
        {
            var autoEvent = new AutoResetEvent(false);
            var stateTimer = new Timer(CheckStatus,
               autoEvent, 3000, 2000);
        }

        public async void CheckStatus(Object stateInfo)
        {
            AutoResetEvent autoEvent = (AutoResetEvent)stateInfo;
            await Update();
        }

        public async Task Update()
        {
            Console.WriteLine("---Regular Update---");
            try
            {
                currentTimestamp = await JSRuntime.InvokeAsync<int>("getTimestamp");
                Console.WriteLine("current time: " + currentTimestamp.ToString());
                await hubConnection.SendAsync("SyncVideo", roomName, currentId, currentTimestamp, playlist.Count);
            }
            catch (JSException)
            {
                Console.WriteLine("Could not fetch timestamp");
            }

            Console.WriteLine("Checking pause status");
            try
            {
                currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
                if (currentState != (int)playerStates.Unstarted && currentState != (int)playerStates.VideoCued)
                {
                    isPaused = (int)playerStates.Paused == currentState;
                }
                else
                {
                    isPaused = true;
                }
                Console.WriteLine("Is paused: " + isPaused.ToString());
                await hubConnection.SendAsync("PauseStatus", roomName, isPaused, this.currentTimestamp);
            }
            catch (JSException)
            {
                Console.WriteLine("Could not get current state");
            }
            Console.WriteLine("---End Update---");
        }

        async Task Send()
        {
            int timestamp = 0;
            if (ContainsTimestamp(currentUrl))
            {
                Console.WriteLine("has timestamp");
                timestamp = GetUrlTimestamp(currentUrl);
                Console.WriteLine(timestamp.ToString());
            }
            var newId = GetId(currentUrl);
            Console.WriteLine("new id " + newId);
            currentUrl = string.Empty;
            StateHasChanged();
            Console.WriteLine("Sending " + newId);
            if (!updating && hubConnection.ConnectionId.Equals(Leader))
            {
                Console.WriteLine("We are the leader, starting to update");
                StartUpdating();
                updating = true;
            }
            await hubConnection.SendAsync("NewVideo", roomName, newId, timestamp);
        }

        [JSInvokable("jsSync")]
        public static void CallJsSync()
        {
            jsSync.Invoke();
        }

        public async void JsSync()
        {
            currentTimestamp = await JSRuntime.InvokeAsync<int>("getTimestamp");
            Console.WriteLine("new current timestamp: " + currentTimestamp.ToString());
            currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
            if (currentState != (int)playerStates.Unstarted && currentState != (int)playerStates.VideoCued)
            {
                isPaused = (int)playerStates.Paused == currentState;
            }
            else
            {
                isPaused = true;
            }

            if (!hubConnection.ConnectionId.Equals(Leader))
            {
                return;
            }

            if (!updating)
            {
                StartUpdating();
                updating = true;
            }
            await hubConnection.SendAsync("SyncVideo", roomName, currentId, this.currentTimestamp, playlist.Count);
            await hubConnection.SendAsync("PauseStatus", roomName, isPaused, this.currentTimestamp);
        }

        [JSInvokable("jsNextVideo")]
        public static void CallJsNextVideo()
        {
            jsNextVideo.Invoke();
        }

        public void JsNextVideo()
        {
            var index = playlist.IndexOf(currentId);
            if (index < playlist.Count - 1)
            {
                SwitchVideo(playlist[index + 1]);
            }
        }

        public string GetId(string Url)
        {
            string id;
            if (Url.Contains("?v="))
            {
                id = Url.Split("=")[1].Split("&t")[0];
                Console.WriteLine("if: " + id);
            }
            else
            {
                id = Url.Replace("https://", "").Split("/")[1].Split("&t=")[0];
                Console.WriteLine("else: " + id);
            }
            return id;
        }

        public int GetUrlTimestamp(string Url)
        {
            return int.Parse(Url.Split("=")[2].TrimEnd('s'));
        }

        public bool ContainsTimestamp(string Url)
        {
            if (Url.Contains("&t="))
            {
                return true;
            }
            return false;
        }


        public async void DeleteVideo(string id)
        {

            var index = playlist.IndexOf(id);
            if (index < playlist.Count - 1 && id == currentId)
            {
                currentId = playlist[index + 1];
                SwitchVideo(currentId);
            }
            playlist.Remove(id);
            await hubConnection.SendAsync("SendPlaylist", roomName, playlist, currentId, currentTimestamp);
            StateHasChanged();
        }

        public async void SwitchVideo(string id)
        {
            Console.WriteLine("Switching video to ID: " + id);
            await hubConnection.SendAsync("SyncVideo", roomName, id, 0, playlist.Count);
            await JSRuntime.InvokeVoidAsync("player.loadVideoById", id);
            currentId = id;
            StateHasChanged();
        }

        public bool IsConnected =>
            hubConnection.State == HubConnectionState.Connected;

        public void Dispose()
        {
            _ = hubConnection.DisposeAsync();
        }

        public async void GetTitle(string videoId)
        {
            HttpResponseMessage response = await Http.GetAsync("api/youtube/GetTitle/" + videoId);
            var responseBody = await response.Content.ReadAsStringAsync();
            try
            {
                videoTitles.Add(videoId, responseBody);
                StateHasChanged();
            }
            catch (System.ArgumentException)
            {
                Console.WriteLine("Video title is already in videoTitles");
            }

        }

        public async void GetThumbnailUrl(string videoId)
        {

            HttpResponseMessage response = await Http.GetAsync("api/youtube/GetThumbnails/" + videoId);
            var responseBody = await response.Content.ReadAsStringAsync();
            try
            {
                videoThumbs.Add(videoId, responseBody);
                StateHasChanged();
            }
            catch (System.ArgumentException)
            {
                Console.WriteLine("Video thumbnail is already in videoThumbs");
            }
        }

        public async void SetUsername()
        {
            if (string.IsNullOrEmpty(NewUsername))
            {
                UsernameErrorText = "Please enter a non-empty username...";
                return;
            }

            if (Members.Contains(NewUsername))
            {
                UsernameErrorText = "Please choose a username that isn't taken";
                NewUsername = string.Empty;
            }
            else
            {
                await hubConnection.SendAsync("SetUsername", roomName, NewUsername);
                Username = NewUsername;
                NewUsername = string.Empty;
                UsernameErrorText = string.Empty;
            }
            StateHasChanged();
        }
    }

