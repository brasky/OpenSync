@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@using System.Threading;
@using Google.Apis.Auth.OAuth2;
@using Google.Apis.Services;
@using Google.Apis.Upload;
@using Google.Apis.Util.Store;
@using Google.Apis.YouTube.v3;
@using Google.Apis.YouTube.v3.Data;
@using System.Net.Http;
@inject HttpClient Http; 
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable


<h3>OpenSync</h3>

<div class="iframe-container">
    <div id="ytplayer">
    </div>
</div>

<div class="form-group">
    <label>
        Video:
        <input @bind="currentUrl" />
    </label>
    <button id="sendBtn" @onclick="Send" disabled="@(!IsConnected)">Send</button>
</div>


<div class="playlist">
    <h2>Playlist:</h2>
    <ol>
        @foreach (var id in playlist)
        {
            if (currentId == id)
            {
                <li>
                    <img src="@videoThumbs.GetValueOrDefault(id)" /> @videoTitles.GetValueOrDefault(id)
                    <a @onclick="() => playlist.Remove(id)" href="">
                        <svg class="bi bi-trash" width="1.25em" height="1.25em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                            <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                        </svg>
                    </a>
                </li>
            }
            else
            {
                <li>
                    <a @onclick="() => SwitchVideo(id)" href=""><img src="@videoThumbs.GetValueOrDefault(id)" />@videoTitles.GetValueOrDefault(id)</a>
                    <a @onclick="() => playlist.Remove(id)" href="">
                        <svg class="bi bi-trash" width="1.25em" height="1.25em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                            <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                        </svg>
                    </a>
                </li>

            }
        }
    </ol>
</div>

@code {
    private HubConnection hubConnection;
    private bool updating = false;
    private int currentTimestamp;
    private string currentUrl;
    private string currentId;
    private bool isPaused = true;
    private int currentState;
    private static Action jsSync;
    private static Action jsNextVideo;
    private IList<string> playlist = new List<string>();
    private static readonly HttpClient client = new HttpClient() { BaseAddress = new Uri("https://localhost:44356/api/") };
    private Dictionary<string, string> videoTitles = new Dictionary<string, string>();
    private Dictionary<string, string> videoThumbs = new Dictionary<string, string>();


    private enum playerStates
    {
        Unstarted = -1,
        Ended = 0,
        Playing = 1,
        Paused = 2,
        Buffering = 3,
        VideoCued = 5
    }

    protected override async Task OnInitializedAsync()
    {
        jsSync = JsSync;
        jsNextVideo = JsNextVideo;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/syncHub"))
            .Build();



        hubConnection.On<string>("ReceiveNewVideo", async (id) =>
        {
            Console.WriteLine("New video received: " + id + " Current ID: " + currentId);
            if (string.IsNullOrEmpty(currentId))
            {
                currentId = id;
                Console.WriteLine("Create player");
                playlist = playlist.Append(id).ToList();
                await JSRuntime.InvokeVoidAsync("onYouTubeIframeAPIReady", id);
                GetTitle(id);
                GetThumbnailUrl(id);
                StateHasChanged();
            }
            else if (currentId != id)
            {
                Console.WriteLine("Adding video to playlist with ID: " + id);
                playlist = playlist.Append(id).ToList();
                var currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
                if (currentState == (int)playerStates.Ended)
                {
                    Console.WriteLine("Playlist is done playing, moving to the newly added video.");
                    JsNextVideo();
                }
                GetTitle(id);
                GetThumbnailUrl(id);
                StateHasChanged();
            }
        });


        hubConnection.On<string, int, int>("ReceiveSync", async (id, timestamp, playlistSize) =>
        {
            if (!updating)
            {
                StartUpdating();
                updating = true;
            }
            if (playlist.Count != playlistSize)
            {
                Console.WriteLine("Requesting playlists to be synced");
                await hubConnection.SendAsync("PlaylistRequest", true);
            }
            if (string.IsNullOrEmpty(currentId))
            {
                await hubConnection.SendAsync("NewVideo", id);
                return;
            }
            if (currentId != id)
            {
                currentId = id;
                Console.WriteLine("Load new video: " + currentId);
                await JSRuntime.InvokeVoidAsync("player.loadVideoById", id);
                Console.WriteLine("Seeking to " + timestamp.ToString());
                await JSRuntime.InvokeVoidAsync("player.seekTo", timestamp);
                currentTimestamp = timestamp;
                Console.WriteLine("Announcing state change");
                StateHasChanged();

            }
            Console.WriteLine("Received update " + id + " : " + currentTimestamp.ToString());
            Console.WriteLine("Current ID: " + currentId);
            this.currentTimestamp = await JSRuntime.InvokeAsync<int>("getTimestamp");
            if (currentTimestamp > timestamp && currentTimestamp - timestamp > 2)
            {
                Console.WriteLine("Seeking forward from " + currentTimestamp.ToString() + " to " + timestamp.ToString());
                await JSRuntime.InvokeVoidAsync("player.seekTo", timestamp);
                this.currentTimestamp = await JSRuntime.InvokeAsync<int>("getTimestamp");
            }
        });

        hubConnection.On<bool, int>("ReceivePauseStatus", async (pauseStatus, timestamp) =>
        {
            Console.WriteLine("Received Pause Status - isPaused: "
                + pauseStatus.ToString()
                + " Timestamp: " + timestamp.ToString()
                + " CurrentState: " + currentState);
            if (isPaused != pauseStatus)
            {
                currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
                if (currentState == (int)playerStates.Paused || currentState == (int)playerStates.Unstarted || currentState == (int)playerStates.VideoCued)
                {
                    Console.WriteLine("Resuming video");
                    await JSRuntime.InvokeVoidAsync("player.playVideo");
                    currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
                    isPaused = false;
                }
                else if (currentState == (int)playerStates.Playing)
                {
                    Console.WriteLine("Pausing video");
                    await JSRuntime.InvokeVoidAsync("player.pauseVideo");
                    await JSRuntime.InvokeVoidAsync("player.seekTo", timestamp);
                    currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
                    isPaused = true;
                }
            }
        });

        hubConnection.On<List<string>>("ReceivePlaylist", (playlist) =>
        {
            Console.WriteLine("Receiving playlist data: " + string.Join(", ", playlist));
            if (!this.playlist.SequenceEqual(playlist))
            {
                this.playlist = playlist;
                foreach (var id in playlist)
                {
                    try
                    {
                        Console.WriteLine("Adding video title and thumbnail for ID: " + id);
                        GetTitle(id);
                        GetThumbnailUrl(id);
                    }
                    catch (System.ArgumentException)
                    {
                        Console.WriteLine("Title/Thumbnail were already in their respective lists");
                    }

                }
            }
        });

        hubConnection.On<bool>("PlaylistRequest", async (_) =>
        {
            Console.WriteLine("Another Client Requested Playlist Sync");
            if (playlist.Count > 0)
            {
                Console.WriteLine("Sending playlist");
                await hubConnection.SendAsync("SendPlaylist", playlist);
            }
        });

        await hubConnection.StartAsync();
    }

    void StartUpdating()
    {
        var autoEvent = new AutoResetEvent(false);
        var stateTimer = new Timer(CheckStatus,
           autoEvent, 10000, 3000);
    }

    public async void CheckStatus(Object stateInfo)
    {
        AutoResetEvent autoEvent = (AutoResetEvent)stateInfo;
        await Update();
    }

    public async Task Update()
    {
        Console.WriteLine("Updating");
        var newTime = await JSRuntime.InvokeAsync<int>("getTimestamp");
        Console.WriteLine("new current timestamp: " + newTime.ToString());
        this.currentTimestamp = newTime;
        Console.WriteLine("current time: " + this.currentTimestamp.ToString());
        await hubConnection.SendAsync("SyncVideo", currentId, this.currentTimestamp, playlist.Count);
        Console.WriteLine("Checking pause status");
        currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
        isPaused = (int)playerStates.Paused == currentState;
        Console.WriteLine("Is paused: " + isPaused.ToString());
        await hubConnection.SendAsync("PauseStatus", isPaused, this.currentTimestamp);
    }

    Task Send()
    {
        var newId = GetId(currentUrl);
        Console.WriteLine("Sending " + newId);
        if (!updating)
        {
            StartUpdating();
            updating = true;
        }
        return hubConnection.SendAsync("NewVideo", newId);
    }

    [JSInvokable("jsSync")]
    public static void CallJsSync()
    {
        jsSync.Invoke();
    }

    public async void JsSync()
    {
        currentTimestamp = await JSRuntime.InvokeAsync<int>("getTimestamp");
        Console.WriteLine("Sending SyncVideo - " + currentId + " : " + currentTimestamp.ToString() + " Playlist Size: " + playlist.Count.ToString());
        await hubConnection.SendAsync("SyncVideo", currentId, currentTimestamp, playlist.Count);

        currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
        isPaused = (int)playerStates.Paused == currentState;
        Console.WriteLine("Sending PauseStatus - isPaused: " + isPaused.ToString());
        await hubConnection.SendAsync("PauseStatus", isPaused, currentTimestamp);
    }

    [JSInvokable("jsNextVideo")]
    public static void CallJsNextVideo()
    {
        jsNextVideo.Invoke();
    }

    public void JsNextVideo()
    {
        var index = playlist.IndexOf(currentId);
        if (index < playlist.Count-1)
        {
            SwitchVideo(playlist[index + 1]);
        }
    }

    public string GetId(string Url)
    {
        string id;
        if (Url.Contains("?v="))
        {
            id = Url.Split("=")[1];

        }
        else
        {
            id = Url.Split("/")[1];
        }
        return id;

    }

    public async void SwitchVideo(string id)
    {
        Console.WriteLine("Switching video to ID: " + id);
        await hubConnection.SendAsync("SyncVideo", id, 0, playlist.Count);
        await JSRuntime.InvokeVoidAsync("player.loadVideoById", id);
        currentId = id;
        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    public async void GetTitle(string videoId)
    {
        HttpResponseMessage response = await Http.GetAsync("api/youtube/GetTitle/" + videoId);
        var responseBody = await response.Content.ReadAsStringAsync();
        try
        {
            videoTitles.Add(videoId, responseBody);
            StateHasChanged();
        }
        catch (System.ArgumentException)
        {
            Console.WriteLine("Video title is already in videoTitles");
        }

    }

    public async void GetThumbnailUrl(string videoId)
    {

        HttpResponseMessage response = await Http.GetAsync("api/youtube/GetThumbnails/" + videoId);
        var responseBody = await response.Content.ReadAsStringAsync();
        try
        {
            videoThumbs.Add(videoId, responseBody);
            StateHasChanged();
        }
        catch (System.ArgumentException)
        {
            Console.WriteLine("Video thumbnail is already in videoThumbs");
        }

    }

}
